#removing_file statage area 
    git rm --cached *****

#rename a file 
  mv oldname newname
  #first add the new file
  git add  newname
  #second add the old file
  git and oldname
  #third commit the changes
  git commit -m "change oldname to newname"
  #with the git command
  git mv oldname newname
  #then a commit
  git commit -m "done with git"

-------------------------------------
reset
git reset --hard #move data-commit in all areas
git reset --mixed #move data in staged and repository
git reset --soft #move data in rrepository only 

git reset --hard oldcommit-hash #where to start over with clean work area

git reset HEAD # use defualt mixed  will unstage the statage area just like git mv oldname newname git commit -m "done with git"
git reset --hard HEAD # reset working area and statage area like nothing happen be for the last commit

----------------------------------------
Stashing DATA
git stash --include-untracked # put all other area in the stash to you can go to a different branch and where you can come back to finish later
git stash list # all the stash like a clipboard
git stash apply nametheStash # while readd the files
git stash apply # defualt to the latest stash
git stash clear # clear all the stash
--------------------------------------------
unstage a file
git reset HEAD filename.txt # unstage one file work area unchange
git reset --hard HEAD filename.txt # won't work
git checkout filename.txt # change working area and staging area
--------------------------
# git operate on things smaller than  a file
git add -p filename.txt # divid the file in hunks
#  press to understand options
# y - stage this hunk
# n - do not stage this hunk
# q - quit; do not stage this hunk or any of the remaining ones
# a - stage this hunk and all later hunks in the file
# d - do not stage this hunk or any of the later hunks in the file
# e - manually edit the current hunk
# ? - print help
--------------switch-------------------------------
git switch [<options>] [--no-guess] <branch>
git switch [<options>] --detach [<start-point>]
git switch [<options>] (-c|-C) <new-branch> [<start-point>]
git switch [<options>] --orphan <new-branch>
-------------restore-------------------------
git restore --staged filename.txt # unstage a file the stage area
git restore filename.txt # unstage a file the working area
------------------------LOG------------------------------------
git log --graph --decorate --oneline
git show 48039d4
git show HEAD # show current head
git show HEAD^ # show back one commit from the current head
git show HEAD^^ # show back two commits from the current head one carrot from one commit back
git show HEAD~3 # ~ then a number for how many commits
git show HEAD@{"1 week ago"}#
---------------------------------------------------------
git blame filename.txt # tell what line was by who
git diff HEAD HEAD^^ # different in commits
git diff branch1..branch2 # different in branches
git log firtbranch..seconndbranch  --oneline # tell you what branch are in second that not in the first
---------------------------------------------
###never change shared history######
-------------------------------------
git commit --amend # change last commit back adding stage to the last commit but new one 
git rebase -i 85f6303# interactive rebase 
    pick b80f745 git  restage and switch
    pick 792a2c9 referencing commits
    pick 70018c9 browsing the log
    pick f0cfd75 Golden Rule

    # Rebase 85f6303..f0cfd75 onto 85f6303 (4 commands)
    #
    # Commands:
    # p, pick <commit> = use commit
    # r, reword <commit> = use commit, but edit the commit message
    # e, edit <commit> = use commit, but stop for amending
    # s, squash <commit> = use commit, but meld into previous commit  
    # f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
    #                    commit's log message, unless -C is used, in which case
    #                    keep only this commit's message; -c is same as -C but
    #                    opens the editor
    # x, exec <command> = run command (the rest of the line) using shell
    # b, break = stop here (continue rebase later with 'git rebase --continue')
    # d, drop <commit> = remove commit
    # l, label <label> = label current HEAD with a name
    # t, reset <label> = reset HEAD to a label
    # m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
    # .       create a merge commit using the original merge commit's
    # .       message (or the oneline, if no original merge commit was
    # .       specified); use -c <commit> to reword the commit message
    #
    # These lines can be re-ordered; they are executed from top to bottom.
    #
    # If you remove a line here THAT COMMIT WILL BE LOST.
    #
    # However, if you remove everything, the rebase will be aborted.

  you can change the order coomit and squash them together
  ----------------------------------------------------------
git reflog HEAD # relog will help reach unreach commit before they are garbage collected
git reflog refs/heads/main
-----------------------------------------------